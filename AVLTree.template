// This is -*-java-*-
%{
#define AVLTree([trim]name, [trim]keytype)
package com.lisebellamy.util;

public class #name#<ObjType>
{
    // Basic node stored in AVL trees
    // Note that this class is not accessible outside
    // of package DataStructures

    private class AvlNode
    {
        public #keytype# key;
	public ObjType obj;
        private AvlNode    left;         // Left child
        private AvlNode    right;        // Right child
	private AvlNode    parent;       // Our parent
        private int        height;       // Height
	
        AvlNode (#keytype# theKey, ObjType obj)
        {
            this (theKey, obj, null, null);
        }

        AvlNode (#keytype# keyArg, ObjType objArg, AvlNode lt, AvlNode rt)
        {
            this.key  = keyArg;
	    this.obj  = objArg;
	    this.parent = null;
            this.left = lt;
            this.right = rt;
            this.height = 0;
        }
    }

    static interface Insert<ObjType>
    {
	public ObjType newObj ();
	public void nodeFound (ObjType obj);
    }

    private class InsertHandler<ObjType>
	implements Insert<ObjType>
    {
	ObjType o;

	public void setObj (ObjType oArg)
	{
	    this.o = oArg;
	}

	public ObjType newObj ()
	{
	    return this.o;
	}

	public void nodeFound (ObjType val)
	{
	}
    }

    private InsertHandler<ObjType> handler = new InsertHandler<ObjType> ();
    
    /** The tree root. */
    private AvlNode root = null;

    public #name# ()
    {
    }
    
    /**
     * Insert into the tree; duplicates are ignored.
     * @param x the item to insert.
     */
    public void insert (#keytype# x, ObjType obj)
    {
	this.handler.setObj (obj);
	root = this.insert (x, this.handler, root, null);
    }

    public void insert (#keytype# x, Insert<ObjType> handler)
    {
	root = this.insert (x, handler, root, null);
    }

    public ObjType retrieve (#keytype# x)
    {
	AvlNode n = this.find (x, this.root);
	if (n != null)
	    {
		return n.obj;
	    }
	else
	    {
		return null;
	    }
    }
    
    /**
     * Remove from the tree. Nothing is done if x is not found.
     * @param x the item to remove.
     */
    public void remove (#keytype# x)
    {
	root = this.remove (x, root, null);
    }

    private AvlNode remove (#keytype# x, AvlNode t, AvlNode parent)
    {
	if (t == null)
	    {
		return null;
	    }
	if (x < t.key)
	    {
		t.left = remove (x, t.left, t);
	    }
	else if (x > t.key)
	    {
		t.right = remove (x, t.right, t);
	    }
	else
	    {
		if (t.left == null || t.right == null)
		    {
			if (t.left != null)
			    {
				t = t.left;
			    }
			else
			    {
				t = t.right;
			    }
		    }
		else
		    {
			AvlNode min = this.findMin (t.right);
			t.key = min.key;
			t.obj = min.obj;
			min.obj = null;
			t.right = this.remove (min.key, t.right, t);
		    }
	    }
	if (t == null)
	    {
		return null;
	    }
	t.height = 1 + max (height (t.left), height (t.right));
	int b = this.balance (t);
	if (b > 1)
	    {
		if (this.balance (t.left) < 0)
		    {
			t.left = this.rotateLeft (t.left);
			t.left.parent = t;
		    }
		t = this.rotateRight (t);
	    }
	else if (b < -1)
	    {
		if (this.balance (t.right) > 0)
		    {
			t.right = this.rotateRight (t.right);
			t.right.parent = t;
		    }
		t = this.rotateLeft (t);
	    }
	t.parent = parent;
	return t;
    }

    private AvlNode rotateLeft (AvlNode t)
    {
	return this.rotateWithRightChild (t);
    }

    private AvlNode rotateRight (AvlNode t)
    {
	return this.rotateWithLeftChild (t);
    }
    /**
     * Find the smallest item in the tree.
     * @return smallest item or null if empty.
     */

    private void validateTree (AvlNode node, AvlNode parent)
    {
	if (node == null)
	    {
		return;
	    }
	if (node.parent != parent)
	    {
		System.out.println ("Bad parent " + node.obj + " " + node.parent + " " + parent);
		assert node.parent == parent;
	    }
	if (node.left != null)
	    {
		assert (node.left.key < node.key);
	    }
	if (node.right != null)
	    {
		assert (node.right.key > node.key);
	    }
	this.validateTree (node.left, node);	
	this.validateTree (node.right, node);
	int calcHeight = 1 + max (height (node.left), height (node.right));
	assert (calcHeight == node.height);
	assert (Math.abs (this.balance (node)) < 2);
    }

    public void validateTree ()
    {
	this.validateTree (this.root, null);
    }
    
    public AvlNode findMin ()
    {
	return findMin (root);
    }

    /**
     * Find the largest item in the tree.
     * @return the largest item of null if empty.
     */
    public AvlNode findMax ()
    {
	return findMax (root);
    }

    /**
     * Find an item in the tree.
     * @param x the item to search for.
     * @return the matching item or null if not found.
     */
    public AvlNode find (#keytype# x)
    {
	return find (x, root);
    }

    /**
     * Make the tree logically empty.
     */
    public void makeEmpty ()
    {
	root = null;
    }

    /**
     * Test if the tree is logically empty.
     * @return true if empty, false otherwise.
     */
    public boolean isEmpty ()
    {
	return root == null;
    }

    /**
     * Internal method to insert into a subtree.
     * @param x the item to insert.
     * @param t the node that roots the tree.
     * @return the new root.
     */
    private AvlNode insert (#keytype# x, Insert<ObjType> iHandler,
			    AvlNode t, AvlNode parent)
    {
	if (t == null)
	    {
		t = new AvlNode (x, iHandler.newObj ());
		t.parent = parent;
		iHandler.nodeFound (t.obj);
	    }
	else if (t.key == x)
	    {
		iHandler.nodeFound (t.obj);
	    }
	else if (x < t.key)
            {
                t.left = this.insert (x, iHandler, t.left, t);
                if ((height (t.left) - height (t.right)) == 2)
		    {
			if (x < t.left.key)
			    {
				t = this.rotateWithLeftChild (t);
			    }
			else
			    {
				t = this.doubleWithLeftChild (t);
			    }
			t.parent = parent;
		    }
            }
	else // t > key
            {
                t.right = this.insert (x, iHandler, t.right, t);
                if ((height (t.right) - height (t.left)) == 2)
		    {
			if (x > t.right.key)
			    {
				t = this.rotateWithRightChild (t);
			    }
			else
			    {
				t = this.doubleWithRightChild (t);
			    }
			t.parent = parent;
		    }
            }
	t.height = #name#.max (height (t.left), height (t.right)) + 1;
	return t;
    }

    private int balance (AvlNode t)
    {
	if (t == null)
	    {
		return 0;
	    }
	else
	    {
		return height (t.left) - height (t.right);
	    }
    }

    /**
     * Internal method to find the smallest item in a subtree.
     * @param t the node that roots the tree.
     * @return node containing the smallest item.
     */
    private AvlNode findMin (AvlNode t)
    {
	if (t != null)
	    {
		while (t.left != null)
		    {
			t = t.left;
		    }
	    }
	return t;
    }

    /**
     * Internal method to find the largest item in a subtree.
     * @param t the node that roots the tree.
     * @return node containing the largest item.
     */
    private AvlNode findMax (AvlNode t)
    {
	if (t != null)
	    {
		while (t.right != null)
		    {
			t = t.right;
		    }
	    }
	return t;
    }

    /**
     * Internal method to find an item in a subtree.
     * @param x is item to search for.
     * @param t the node that roots the tree.
     * @return node containing the matched item.
     */
    private AvlNode find (#keytype# x, AvlNode t)
    {
	while (t != null)
	    {
		if (x == t.key)
		    {
			return t;
		    }
		else if (x < t.key)
		    {
			t = t.left;
		    }
		else
		    {
			t = t.right;
		    }
	    }
	return null;   // No match
    }

    /**
     * Return the height of node t, or -1, if null.
     */
    private int height (AvlNode t)
    {
	return t == null ? 0 : t.height;
    }

    /**
     * Return maximum of lhs and rhs.
     */
    private static int max (int lhs, int rhs)
    {
	return lhs > rhs ? lhs : rhs;
    }

    /**
     * Rotate binary tree node with left child.
     * For AVL trees, this is a single rotation for case 1.
     * Update heights, then return new root.
     */
    private AvlNode rotateWithLeftChild (AvlNode k2)
    {
	AvlNode k1 = k2.left;
	AvlNode parent = k2.parent;
	
	k2.left = k1.right;
	if (k2.left != null)
	    {
		k2.left.parent = k2;
	    }
	
	k1.right = k2;
	if (k1.right != null)
	    {
		k1.right.parent = k1;
	    }
	
	k2.height = max (height (k2.left), height (k2.right)) + 1;
	k1.height = max (height (k1.left), height (k1.right)) + 1;
	k1.parent = parent;
	return k1;
    }

    /**
     * Rotate binary tree node with right child.
     * For AVL trees, this is a single rotation for case 4.
     * Update heights, then return new root.
     */
    private AvlNode rotateWithRightChild (AvlNode k1)
    {
	AvlNode k2 = k1.right;
	AvlNode parent = k1.parent;
	
	k1.right = k2.left;
	if (k1.right != null)
	    {
		k1.right.parent = k1;
	    }
	
	k2.left = k1;
	if (k2.left != null)
	    {
		k2.left.parent = k2;
	    }
	
	k1.height = #name#.max (height (k1.left), height (k1.right)) + 1;
	k2.height = #name#.max (height (k2.right), height (k2.left)) + 1;
	k2.parent = parent;
	return k2;
    }

    /**
     * Double rotate binary tree node: first left child
     * with its right child; then node k3 with new left child.
     * For AVL trees, this is a double rotation for case 2.
     * Update heights, then return new root.
     */
    private AvlNode doubleWithLeftChild (AvlNode k3)
    {
	k3.left = rotateWithRightChild (k3.left);
	if (k3.left != null)
	    {
		k3.left.parent = k3;
	    }
	return rotateWithLeftChild (k3);
    }

    /**
     * Double rotate binary tree node: first right child
     * with its left child; then node k1 with new right child.
     * For AVL trees, this is a double rotation for case 3.
     * Update heights, then return new root.
     */
    private AvlNode doubleWithRightChild (AvlNode k1)
    {
	k1.right = rotateWithLeftChild (k1.right);
	if (k1.right != null)
	    {
		k1.right.parent = k1;
	    }
	return rotateWithRightChild (k1);
    }
}
}%
